/*
 **********PROYECTO BALAM 2025************
 *  Módulo #5
 *  Prueba de motores con control similar a PS4
 *  FASE CREA
 *  
 *  Basado en Tutorial Rachel de Barros
 *  https://racheldebarros.com/esp32-projects/connect-your-game-controller-to-an-esp32/
 */

// Seteo de variables para motores
// Incluir libreria del TB6612

#include <TB6612_ESP32.h>

//Definir variables y pines del motor
//Motor A
#define PWMA 15
#define AIN1 18
#define AIN2 5

//Motor A1
#define PWMA1 12
#define AIN11 32
#define AIN22 33

//Motor B
#define PWMB 2
#define BIN1 27
#define BIN2 14

//Motor B1
#define PWMB1 13
#define BIN11 25
#define BIN22 26

#define STBY 0
#define STBY1 22

// estas constantes se utilizan para permitirle realizar la configuración del motor
// alinearse con nombres de funciones como forward. El valor puede ser 1 o -1
const int offsetA = 1;
const int offsetB = 1;

const int offsetA1 = 1;
const int offsetB1 = 1;


// Inicializando motores. La biblioteca le permitirá los motores.
// Si está utilizando funciones como reenviar que toman 2 motores como argumentos puedes escribir nuevas funciones o
// llama a la función más de una vez.

Motor motor1 = Motor(AIN1, AIN2, PWMA, offsetA, STBY,5000 ,8,1 );
Motor motor2 = Motor(BIN1, BIN2, PWMB, offsetB, STBY,5000 ,8,2 );

Motor motor11 = Motor(AIN11, AIN22, PWMA1, offsetA1, STBY1,5000 ,8,4 );
Motor motor22 = Motor(BIN11, BIN22, PWMB1, offsetB1, STBY1,5000 ,8,5 );

// Valores Iniciales Joystick
int LStickY = 0;
int LStickX = 0;
int RStickY = 0;
int RStickX = 0;


// Valores máximos de motores
int valorMaxMotorR = 215;
int valorMaxMotorL = 255;

// Valores de deadzone
int valorDeadZoneLXMin = -5;
int valorDeadZoneLXMax = 5;
int valorDeadZoneLYMin = -5;
int valorDeadZoneLYMax = 5;
int valorDeadZoneRXMin = -5;
int valorDeadZoneRXMax = 5;
int valorDeadZoneRYMin = -5;
int valorDeadZoneRYMax = 5;


// Librería para conectar control
#include <Bluepad32.h>

ControllerPtr myControllers[BP32_MAX_GAMEPADS];

// This callback gets called any time a new gamepad is connected.
// Up to 4 gamepads can be connected at the same time.
void onConnectedController(ControllerPtr ctl) {
  bool foundEmptySlot = false;
  for (int i = 0; i < BP32_MAX_GAMEPADS; i++) {
    if (myControllers[i] == nullptr) {
      Serial.printf("CALLBACK: Controller is connected, index=%d\n", i);
      // Additionally, you can get certain gamepad properties like:
      // Model, VID, PID, BTAddr, flags, etc.
      ControllerProperties properties = ctl->getProperties();
      Serial.printf("Controller model: %s, VID=0x%04x, PID=0x%04x\n", ctl->getModelName().c_str(), properties.vendor_id, properties.product_id);
      myControllers[i] = ctl;
      foundEmptySlot = true;
      break;
      }
    }

    if (!foundEmptySlot) {
      Serial.println("CALLBACK: Controller connected, but could not found empty slot");
    }
}

void onDisconnectedController(ControllerPtr ctl) {
  bool foundController = false;

  for (int i = 0; i < BP32_MAX_GAMEPADS; i++) {
    if (myControllers[i] == ctl) {
      Serial.printf("CALLBACK: Controller disconnected from index=%d\n", i);
      myControllers[i] = nullptr;
      foundController = true;
      break;
    }
  }

    if (!foundController) {
      Serial.println("CALLBACK: Controller disconnected, but not found in myControllers");
    }
}

// ========= SEE CONTROLLER VALUES IN SERIAL MONITOR ========= //

void dumpGamepad(ControllerPtr ctl) {
  Serial.printf(
  "idx=%d, dpad: 0x%02x, buttons: 0x%04x, axis L: %4d, %4d, axis R: %4d, %4d, brake: %4d, throttle: %4d, "
  "misc: 0x%02x, gyro x:%6d y:%6d z:%6d, accel x:%6d y:%6d z:%6d\n",
  ctl->index(),        // Controller Index
  ctl->dpad(),         // D-pad
  ctl->buttons(),      // bitmask of pressed buttons
  ctl->axisX(),        // (-511 - 512) left X Axis
  ctl->axisY(),        // (-511 - 512) left Y axis
  ctl->axisRX(),       // (-511 - 512) right X axis
  ctl->axisRY(),       // (-511 - 512) right Y axis
  ctl->brake(),        // (0 - 1023): brake button
  ctl->throttle(),     // (0 - 1023): throttle (AKA gas) button
  ctl->miscButtons(),  // bitmask of pressed "misc" buttons
  ctl->gyroX(),        // Gyro X
  ctl->gyroY(),        // Gyro Y
  ctl->gyroZ(),        // Gyro Z
  ctl->accelX(),       // Accelerometer X
  ctl->accelY(),       // Accelerometer Y
  ctl->accelZ()        // Accelerometer Z
  );
}

// ========= GAME CONTROLLER ACTIONS SECTION ========= //

void processGamepad(ControllerPtr ctl) {
  // There are different ways to query whether a button is pressed.
  // By query each button individually:
  //  a(), b(), x(), y(), l1(), etc...
 
  //== PS4 X button = 0x0001 ==//
  if (ctl->buttons() == 0x0001) {
    // code for when X button is pushed
  }
  if (ctl->buttons() != 0x0001) {
    // code for when X button is released
  }

  //== PS4 Square button = 0x0004 ==//
  if (ctl->buttons() == 0x0004) {
    // code for when square button is pushed
  }
  if (ctl->buttons() != 0x0004) {
  // code for when square button is released
  }

  //== PS4 Triangle button = 0x0008 ==//
  if (ctl->buttons() == 0x0008) {
    // code for when triangle button is pushed
    brake(motor11, motor22);
    Serial.println("Disparador Desactivado");
    delay(10);
  }
  if (ctl->buttons() != 0x0008) {
    // code for when triangle button is released
  }

  //== PS4 Circle button = 0x0002 ==//
  if (ctl->buttons() == 0x0002) {
    // code for when circle button is pushed
    forward(motor11, motor22, 255);
    Serial.println("Disparador Activado");
    delay(10);
  }
  if (ctl->buttons() != 0x0002) {
    // code for when circle button is released
  }

  //== PS4 Dpad UP button = 0x01 ==//
  if (ctl->dpad() == 0x01) {
    // code for when dpad up button is pushed
    if (valorMaxMotorR < 180) {
      valorMaxMotorR = 180;
    }
    
    if ((valorMaxMotorR >= 180) && (valorMaxMotorR <= 255)) {
      valorMaxMotorR = valorMaxMotorR + 10;
      Serial.println(valorMaxMotorR);
      delay(10);
    }

    if (valorMaxMotorR > 255) {
      valorMaxMotorR = 255;
    }
  }

  //==PS4 Dpad DOWN button = 0x02==//
  if (ctl->dpad() == 0x02) {
    // code for when dpad down button is pushed
    if (valorMaxMotorL < 180) {
      valorMaxMotorL = 180;
    }
    
    if ((valorMaxMotorL >= 180) && (valorMaxMotorL <= 255)) {
      valorMaxMotorL = valorMaxMotorL - 10;
      Serial.println(valorMaxMotorL);
      delay(10);  
    }

    if (valorMaxMotorL > 255) {
      valorMaxMotorL = 255;
    }
    
  }
  
  //== PS4 Dpad LEFT button = 0x08 ==//
  if (ctl->dpad() == 0x08) {
    // code for when dpad left button is pushed
    if (valorMaxMotorL < 180) {
      valorMaxMotorL = 180;
    }
    
    if ((valorMaxMotorL >= 180) && (valorMaxMotorL <= 255)) {
      valorMaxMotorL = valorMaxMotorL + 10;
      Serial.println(valorMaxMotorL);
      delay(10);  
    }

    if (valorMaxMotorL > 255) {
      valorMaxMotorL = 255;
    }
  }
  
  //== PS4 Dpad RIGHT button = 0x04 ==//
  if (ctl->dpad() == 0x04) {
    // code for when dpad right button is pushed
    if (valorMaxMotorR < 180) {
      valorMaxMotorR = 180;
    }
    if ((valorMaxMotorR >= 180) && (valorMaxMotorR <= 255)) {
      valorMaxMotorR = valorMaxMotorR - 10;
      Serial.println(valorMaxMotorR);
      delay(10);  
    }

    if (valorMaxMotorR > 255) {
      valorMaxMotorR = 255;
    }
  }
  
  //== PS4 R1 trigger button = 0x0020 ==//
  if (ctl->buttons() == 0x0020) {
    // code for when R1 button is pushed
  }
  if (ctl->buttons() != 0x0020) {
    // code for when R1 button is released
  }

  //== PS4 R2 trigger button = 0x0080 ==//
  if (ctl->buttons() == 0x0080) {
    // code for when R2 button is pushed
    brake(motor1, motor2);
    Serial.println("Paro de carro");
    delay(10);
  }
  if (ctl->buttons() != 0x0080) {
    // code for when R2 button is released
  }

  //== PS4 L1 trigger button = 0x0010 ==//
  if (ctl->buttons() == 0x0010) {
    // code for when L1 button is pushed
      valorMaxMotorR = 215;
      valorMaxMotorL = 255;
  } 
  if (ctl->buttons() != 0x0010) {
    // code for when L1 button is released
  }

  //== PS4 L2 trigger button = 0x0040 ==//
  if (ctl->buttons() == 0x0040) {
    // code for when L2 button is pushed
  }
  if (ctl->buttons() != 0x0040) {
    // code for when L2 button is released
  }

// ========= JOYSTICKS ========= //

  //== LEFT JOYSTICK - UP OR DOWN ==//
  if ( (ctl->axisY() <= valorDeadZoneLYMin) || (ctl->axisY() >= valorDeadZoneLYMax)) {
    // code for when left joystick is pushed up
    Serial.println(ctl->axisY());
    LStickY = map(ctl->axisY(), 512, -508, -valorMaxMotorL, valorMaxMotorL); // Función map con el joystick conviertiendo con valores del motor
    Serial.printf("Left Stick y at %d\n", LStickY);
    motor1.drive(LStickY,5);    
    }
    
  //== LEFT JOYSTICK DEADZONE ==//
  if (ctl->axisY() > valorDeadZoneLYMin && ctl->axisY() < valorDeadZoneLYMax && ctl->axisX() > valorDeadZoneLXMin && ctl->axisX() < valorDeadZoneLXMax) {
    // code for when left joystick is at idle
    motor1.drive(0,5);  
  }

  //== RIGHT JOYSTICK - X AXIS ==//
  if (ctl->axisRX()) {
    // code for when right joystick moves along x-axis
  }

  //== RIGHT JOYSTICK - Y AXIS ==//
  if ( (ctl->axisRY() <= -10) || (ctl->axisRY() >= 10)) {
    // code for when right joystick moves along y-axis
    Serial.println(ctl->axisRY());
    RStickY = map(ctl->axisRY(), 512, -508, -valorMaxMotorR, valorMaxMotorR); // Función map con el joystick conviertiendo con valores del motor
    Serial.printf("Right Stick y at %d\n", RStickY);
    motor2.drive(RStickY,5);
  }

  //== RIGHT JOYSTICK DEADZONE ==//
  if (ctl->axisRY() > valorDeadZoneRYMin && ctl->axisRY() < valorDeadZoneRYMax && ctl->axisRX() > valorDeadZoneRXMin && ctl->axisRX() < valorDeadZoneRXMax) {
    // code for when left joystick is at idle
    motor2.drive(0,5);  
  }
  
  dumpGamepad(ctl);
}

void processControllers() {
  for (auto myController : myControllers) {
    if (myController && myController->isConnected() && myController->hasData()) {
      if (myController->isGamepad()) {
         processGamepad(myController);
      }
      else {
        Serial.println("Unsupported controller");
      }
    }
  }
}

// Arduino setup function. Runs in CPU 1

void setup() {
  Serial.begin(115200);
  Serial.printf("Firmware: %s\n", BP32.firmwareVersion());
  const uint8_t* addr = BP32.localBdAddress();
  Serial.printf("BD Addr: %2X:%2X:%2X:%2X:%2X:%2X\n", addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

  // Setup the Bluepad32 callbacks
  BP32.setup(&onConnectedController, &onDisconnectedController);

  // "forgetBluetoothKeys()" should be called when the user performs
  // a "device factory reset", or similar.
  // Calling "forgetBluetoothKeys" in setup() just as an example.
  // Forgetting Bluetooth keys prevents "paired" gamepads to reconnect.
  // But it might also fix some connection / re-connection issues.
  //BP32.forgetBluetoothKeys();

  // Enables mouse / touchpad support for gamepads that support them.
  // When enabled, controllers like DualSense and DualShock4 generate two connected devices:
  // - First one: the gamepad
  // - Second one, which is a "virtual device", is a mouse.
  // By default, it is disabled.
  BP32.enableVirtualDevice(false);
}

// Arduino loop function. Runs in CPU 1.

void loop() {
  // This call fetches all the controllers' data.
  // Call this function in your main loop.
  bool dataUpdated = BP32.update();
  if (dataUpdated)
    processControllers();

    // The main loop must have some kind of "yield to lower priority task" event.
    // Otherwise, the watchdog will get triggered.
    // If your main loop doesn't have one, just add a simple `vTaskDelay(1)`.
    // Detailed info here:
    // https://stackoverflow.com/questions/66278271/task-watchdog-got-triggered-the-tasks-did-not-reset-the-watchdog-in-time

    // vTaskDelay(1);
  delay(150);
}
